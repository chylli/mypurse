require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CategoriesController, :type => :controller do

  let(:user) {
    User.create!(:name => 'name', :email => 'email@example.com', :password => 'password', :password_confirmation => 'password', :language => 'en')
  }
  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  # It is used to create an Category directly
  let(:valid_attributes) {
    {user_id: user.id, :name => 'name', type: "PropertyCategory"}
  }

  # This is used to post to create an Category
  let(:valid_attributes2) {
    {name: "type", description: "property type", type: 'PropertyCategory'}
  }

  let(:invalid_attributes) {
    {:name => "x" * 35}
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {user_id: user.to_param} }

  describe "GET index" do
    it "assigns all Categories as @categories" do
      category = Category.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:categories)).to include(category)
    end
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      account_category = Category.create! valid_attributes
      get :show, {:id => account_category.to_param}, valid_session
      expect(assigns(:category)).to eq(account_category)
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      get :new, {}, valid_session
      expect(assigns(:category)).to be_a_new(Category)
    end
  end

  describe "GET edit" do
    it "assigns the requested category as @category" do
      account_category = Category.create! valid_attributes
      get :edit, {:id => account_category.to_param}, valid_session
      expect(assigns(:category)).to eq(account_category)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Category" do
        expect {
          post :create, {:property_category => valid_attributes2,:type => 'AccountType'}, valid_session
        }.to change(Category, :count).by(11)
      end

      it "assigns a newly created category as @category" do
        post :create, {:property_category => valid_attributes2,:type => 'AccountType'}, valid_session
        expect(assigns(:category)).to be_a(Category)
        expect(assigns(:category)).to be_persisted
        expect(assigns(:category).user_id).to eq(user.id)
      end

      it "redirects to the created category" do
        post :create, {:property_category => valid_attributes2, :type => 'AccountType'}, valid_session
        expect(response).to redirect_to(Category.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        post :create, {:property_category => invalid_attributes, :type => 'AccountType'}, valid_session
        expect(assigns(:category)).to be_a_new(Category)
      end

      it "re-renders the 'new' template" do
        post :create, {:property_category => invalid_attributes, :type => 'AccountType'}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        ({name: "name2"})
      }

      it "updates the requested category" do
        account_category = Category.create! valid_attributes
        put :update, {:id => account_category.to_param, :property_category => new_attributes,:type => 'AccountCategory'}, valid_session
        account_category.reload
        expect(account_category.name).to eq("name2")
      end

      it "assigns the requested category as @category" do
        account_category = Category.create! valid_attributes
        put :update, {:id => account_category.to_param, :property_category => valid_attributes, :type => 'AccountType'}, valid_session
        expect(assigns(:category)).to eq(account_category)
      end

      it "redirects to the category" do
        account_category = Category.create! valid_attributes
        put :update, {:id => account_category.to_param, :property_category => valid_attributes, :type => 'AccountType'}, valid_session
        expect(response).to redirect_to(account_category)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        account_category = Category.create! valid_attributes
        put :update, {:id => account_category.to_param, :property_category => invalid_attributes, type: 'AccountType'}, valid_session
        expect(assigns(:category)).to eq(account_category)
      end

      it "re-renders the 'edit' template" do
        account_category = Category.create! valid_attributes
        put :update, {:id => account_category.to_param, :property_category => invalid_attributes, :type => 'AccountType'}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      account_category = Category.create! valid_attributes
      expect {
        delete :destroy, {:id => account_category.to_param}, valid_session
      }.to change(Category, :count).by(-1)
    end

    it "redirects to the Categories list" do
      account_category = Category.create! valid_attributes
      delete :destroy, {:id => account_category.to_param}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

end
