require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:name => 'name', :email => 'email@example.com', :password => 'password', :password_confirmation => 'password'}
  }

  let(:invalid_attributes) {
    {:name => 'name', :email => 'email', :password => 'password', :password_confirmation => 'nopassword'}
  }

  let(:user) {
    User.create!(:name => 'name2', :email => 'email2@example.com', :password => 'password', :password_confirmation => 'password')
  }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {user_id: user.to_param } }

  describe "GET show" do
    it "assigns the requested user as @user" do
      get :show, {}, valid_session
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session
      expect(assigns(:new_user)).to be_a_new(User)
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      get :edit, {}, valid_session
      expect(assigns(:new_user)).to eq(user)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(assigns(:new_user)).to be_a(User)
        expect(assigns(:new_user)).to be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        expect(response).to redirect_to(User.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(assigns(:new_user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        post :create, {:user => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {:name => 'name2'}
      }

      it "updates the requested user" do
        put :update, {:user => new_attributes}, valid_session
        user.reload
        expect(user.name).to eq('name2')
      end

      it "assigns the requested user as @user" do
        put :update, {:user => valid_attributes}, valid_session
        expect(assigns(:new_user)).to eq(user)
      end

      it "redirects to the user" do
        put :update, {:user => valid_attributes}, valid_session
        expect(response).to redirect_to(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        put :update, {:user => invalid_attributes}, valid_session
        expect(assigns(:new_user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        put :update, {:user => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      # call user will init user by let()
      user
      expect {
        delete :destroy, {}, valid_session
      }.to change(User, :count).by(-1)
      puts User.count
    end

    it "redirects to the root" do
      delete :destroy, {}, valid_session
      expect(response).to redirect_to(root_url)
    end
  end

end
